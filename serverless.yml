service: sls-progimage
# app and org for use with dashboard.serverless.com
app: sls-progimage
org: trevorobrien

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stackName: sls-progimage
  stage: ${opt:stage, 'dev'}
  environment:
    bucketName: ${self:custom.bucket}
    INVOKE_ENDPOINT: 'http://localhost:3000'
    INVOKE_TRANSFORMER: 'sls-progimage-dev-transformer'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::${self:custom.bucket}/*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource:
        - "arn:aws:lambda:*:*:*"
        - "arn:aws:lambda:${self:provider.region}:*:function:blur"
        - "arn:aws:lambda:${self:provider.region}:*:function:retrieve"
    - Effect: Allow
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "logs:DescribeLogStreams"
      Resource:
        - "arn:aws:logs:*"

package:
  individually: true
functions:
  uploader:
    handler: src/handlers/uploader.handler
    memorySize: 3008
    timeout: 15
    events:
      - http:
          path: upload
          method: post
          cors: true
  retriever:
    handler: src/handlers/retriever.handler
    memorySize: 3008
    timeout: 15
    events:
      - http:
          path: retriever
          method: get
          contentHandling: CONVERT_TO_BINARY
  transformer:
    handler: src/handlers/transformer.handler
    memorySize: 3008
    timeout: 15
    events:
      - http:
          path: transformer
          method: get
resources:
  Resources:
    StorageBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:custom.bucket}
custom:
  bucket: sls-to-progimage
  scriptHooks:
    before:package:createDeploymentArtifacts: npm run buildsls
  apigwBinary:
      types:           #list of mime-types
        - 'image/jpeg'
        - 'image/png'
        - 'image/*'
plugins:
  - serverless-offline
  - serverless-mocha-plugin
  - serverless-scriptable-plugin
  - serverless-apigw-binary
  # - serverless-plugin-optimize
